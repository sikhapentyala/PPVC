# define settings and params
num_classes = 7 #int(program.args[1])  # 6
N = 48   # num of images 10
h = 48 #int(program.args[3])   # 48
w = 48 #int(program.args[4])   # 48
c = 1 #int(program.args[5])   #  1

program.use_split(3)
program.use_trunc_pr = True
#program.options.cisc = True

from ml import *
Layer.n_threads = 4
FixConv2d.use_conv2ds = True

# define architecture of the CNN
layers = [
        FixConv2d([1,48,48,1], (5,5,1,64), (64,), [1, 44, 44, 64], (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 44, 44, 64]),
        FixAveragePool2d((1, 44, 44, 64), (1, 20, 20, 64), (5, 5),(2,2)),
        FixConv2d((1, 20, 20, 64), ( 3, 3, 64, 64), (64,), (1, 18, 18, 64), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 18, 18, 64]),
        FixConv2d((1, 18, 18, 64), (3, 3, 64,64), (64,), (1, 16, 16, 64), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 16, 16, 64]),
        FixAveragePool2d((1, 16, 16, 64), (1, 7, 7, 64), (3, 3),(2,2)),
        FixConv2d((1, 7, 7, 64), ( 3, 3, 64,128), (128,), (1, 5, 5, 128), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 5, 5, 128]),
        FixConv2d((1, 5, 5, 128), ( 3, 3, 128,128), (128,), (1, 3, 3, 128), (1, 1), padding='VALID', tf_weight_format='True'),
        Relu([1, 3, 3, 128]),
        FixAveragePool2d((1, 3, 3, 128), (1, 1, 1, 128), (3, 3),(2,2)),
        Dense(1,128,1024,activation='relu'),
        Dense(1,1024,1024,activation='relu'),
        Dense(1,1024,7,activation='id'),
        Argmax((1, 7))
        ]

# read secret shares of images
alice = MultiArray([N,h,w,c],sfix)
alice.input_from(0)

# get OHE-labels
y_truth = sfix.Matrix(N,num_classes)
y_truth.input_from(0)

# get sensitive attributes 0: female 1: male
sensitive = Array(N,sint)
sensitive.input_from(0)


# read secret shares of model parameters
for layer in layers:
        layer.input_from(1)
# can use public_input, but have to put loop for each value. 
# public_input is beneficial for models like lr
# Better to have secret shares file - presistent - update the code


# define predict array
y_predict = Array(N,sint)
y_truth_1d = Array(N,sint)
y_prob = sfix.Matrix(N,num_classes)

graph = Optimizer()
graph.layers = layers
y_prob = graph.eval(alice)

@for_range(N)
def _(i):
        y_predict[i] = argmax(y_prob[i].get_vector())
        y_truth_1d[i] = argmax(y_truth[i].get_vector())


# define intermediate variables
loss_m = sfix(0)
loss_f = sfix(0)
count_m = sfix(0)
y_pred_log = sfix.Matrix(N,num_classes)
d_product = Array(N,sfix)
corr_m = sfix(0)
corr_f = sfix(0)


# Calculate logloss, subgroup logloss
@for_range_opt(N)
def _(i):
   @for_range_opt(num_classes)
   def _(j):
        y_pred_log[i][j] = ml.log_e(y_prob[i][j])  #costly operations

@for_range(N)
def _(i):
    d_product[i] =  sfix.dot_product(y_truth[i], y_pred_log[i]) * (-1)

loss = sum(d_product)
loss_m = sfix.dot_product(d_product, sensitive)
loss_f = loss - loss_m
count_m = sum(sensitive)

count_0 = (count_m == 0)
count_N = (count_m == num_samples)

logloss_m = (loss_m / count_m) + count_0 * (0 - (loss_m / count_m))
logloss_f = (loss_f / (num_samples-count_m)) + count_N * (0 - (loss_f/(num_samples-count_m)))
logloss = loss * (1/num_samples)


print_ln("LogLoss:%s:%s:%s",logloss.reveal(), logloss_m.reveal(), logloss_f.reveal())

# Calculate accuracy, subgroup accuracy
@for_range_opt(N)
def _(i):
        corr = (y_truth_1d[i] == y_predict[i]) 
        _corr_m = sensitive[i] * corr
        corr_m = corr_m + _corr_m
        corr_f = corr_f + corr - _corr_m

acc_m = (corr_m / count_m) + count_0 * (0 - (corr_m / count_m))
acc_f = (corr_f / (num_samples-count_m)) + count_N * (0 - (corr_f/(num_samples-count_m)))
acc = (corr_m + corr_f) * (1/num_samples)

print_ln("Accuracy:%s:%s:%s",acc.reveal(), acc_m.reveal(), acc_f.reveal())


'''
for class_ in range(num_classes):
        @for_range_opt(N)
        def _(i):
                truth_is_class = y_truth[i][class_].__eq__(1)
                pred_is_class = y_predict[i].__eq__(class_)
                
                is_Protected = sensitive[i]

                tp = truth_is_class * pred_is_class   
                tm =is_Protected * truth_is_class
                pm = is_Protected * pred_is_class
                tpm = is_Protected * tp

                TP_M = TP_M +    tpm
                FN_M = FN_M +   (tm - tpm)
                FP_M = FP_M + (pm - tpm)
                TN_M = TN_M + (is_Protected - tm -pm + tpm)

                TP_F = TP_F + (tp - mtp)
                FN_F = FN_F + (truth_is_class - tm - tp + tpm)
                FP_F = FP_F + (pred_is_class - pm - tp + tpm)
                TN_F = TN_F + (1 - truth_is_class - pred_is_class + tp - is_Protected +tm +tp-tpm)
'''


